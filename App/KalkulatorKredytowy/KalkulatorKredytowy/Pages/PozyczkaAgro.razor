@page "/agro"
@using KalkulatorKredytowy.Data
@using System.Text.RegularExpressions;
@inject ScheduleGeneratorService ScheduleService
@inject IJSRuntime JS

<PageTitle>Pozyczka AGRO</PageTitle>

<div class="d-flex justify-content-center">

	<h2 class="align-self-center m-5">Pożyczka AGRO</h2>
	<br />
	<form class="m-5 w-75 align-self-center">

		<div class="m-3">
			<label class="form-label" for="name">Imię i nazwisko:</label>
			<input class="form-control" id="name" type="text" @bind-value=ClientName/>
		</div>

		<div class="m-3">
			<label class="form-label" for="date">Data zawarcia umowy:</label>
			<input class="form-control" id="date" type="date" @bind-value=ContractDate/>
		</div>

		<div class="m-3">
			<label class="form-label" for="span">Okres finansowania:</label>
			<input class="form-control" id="span" pattern=@FinancingSpanRegex.ToString() type="text" placeholder="NNN miesięcy" @bind-value=FinancingSpan/>
		</div>	
		
		<div class="m-3">
			<label class="form-label" for="value">Wartość inwestycji:</label>
			<input class="form-control" id="value" pattern=@InvestmentValueRegex type="text" placeholder="NNN NNN NNN, NN PLN" @bind-value=InvestmentValue/>
		</div>		

		<div class="m-3">
			<label class="form-label" for="rate">Oprocentowanie kredytu:</label>
			<input class="form-control" id="rate" pattern=@InterestRateRegex type="text" placeholder="NN,NN %" @bind-value=InterestRate/>
		</div>		

		<div class="m-3">
			<label class="form-label" for="commision">Prowizja:</label>
			<input class="form-control" id="commision" pattern=@CommissionRateRegex type="text" placeholder="NN,NN %" @bind-value=CommissionRate/>
		</div>		

		<div class="m-3">
			<label class="form-label" for="loanschedule">Harmonogram:</label>
			<select class="form-control" id="loanschedule" @onchange=AssignSchedule>
				<option>Miesięczny</option>
				<option>Kwartalny</option>
			</select>
		</div>

		<div class="m-3" style="text-align:center">
			<a class="btn btn-primary" @onclick=GeneratePDF>Generuj harmonogram</a>
			<input class="btn btn-secondary" type="reset" />
		</div>

	</form>
</div>


@code {

	public string? ClientName = "pablo";
	public DateTime? ContractDate = DateTime.Today;

	private readonly Regex FinancingSpanRegex = new Regex(@"([0-9]{1,3}) miesięcy");
	public string? FinancingSpan = "12 miesięcy";
	private readonly Regex InvestmentValueRegex = new Regex(@"([0-9 ]*, [0-9][0-9]) PLN");
	public string? InvestmentValue = "123 456 789, 01 PLN";
	private readonly Regex InterestRateRegex = new Regex(@"([1-9][0-9]*)");
	public string? InterestRate = "12,34 %";
	private readonly Regex CommissionRateRegex = new Regex(@"([1-9][0-9]*)");
	public string? CommissionRate = "45,67 %";

	public LoanSchedule Schedule = LoanSchedule.Monthly;

	private async void GeneratePDF(EventArgs e) {
		bool clientSideValidation = await JS.InvokeAsync<bool>("validateInputs");
		if (!clientSideValidation)
			return;

		if (ContractDate == null)
			return;

		if (ClientName == null)
			return;

		LoanData loan = new LoanData();

		loan.ClientName = ClientName;
		loan.ContractDate = ContractDate.Value;
		loan.FinancingSpan = int.Parse(FinancingSpanRegex.Match(FinancingSpan).Groups[1].ValueSpan);
		loan.InvestmentValue = decimal.Parse(InvestmentValueRegex.Match(InvestmentValue).Groups[1].Value.Replace(" ", ""));
		loan.InterestRate = decimal.Parse(InterestRateRegex.Match(InterestRate).Groups[1].ValueSpan);
		loan.CommissionRate = decimal.Parse(CommissionRateRegex.Match(CommissionRate).Groups[1].ValueSpan);
		loan.Schedule = Schedule;

		Console.WriteLine(loan);


	}

	private void AssignSchedule(ChangeEventArgs e)
	{
		switch ((string?) e.Value)
		{
			default:
				break;
			case "Miesięczny":
				Schedule = LoanSchedule.Monthly;
				break;
			case "Kwartalny":
				Schedule = LoanSchedule.Quarterly;
				break;
		}
	}
}
